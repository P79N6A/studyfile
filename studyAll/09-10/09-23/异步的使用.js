同步：该方法执行完毕，才会往下执行（'排队执行'）

异步：能提升页面加载速度
1.咋实现异步
	'创建一个新的线程'，'接收一个同步方法'，启动线程，执行方法上的操作
2.异步执行完毕需要下一步操作，咋知道异步执行完的时机呢
	解决的办法是'传递给异步一个回调方法'，'执行完毕后调用'

	
js异步编程的四种方法
JS执行环境是单线程
	'同步'这种'排队执行'的方式会让程序卡在一个较慢的地方
	为了解决这个问题JS使用'异步Asynchronous'
	
	'异步模式'每一个任务有一个或者多个回调函数，前一个执行后，
	执行回调函数，后一个不等第一个结束就执行，所以程序的'执行顺序'与
	任务的'排列顺序是不一致的'
	
	异步执行的框架'Ajax操作'
	要使用ajax，不用引入ajax库，只需要引入Jquery就行了；
	
一：回调函数
	1>假如有两个函数f1和f2，后者等待前者的执行结果
		f1();		f2();
	2>改写f1，把f2写成f1的回调函数
		function f1(callback){
			setTimeout(function(){
				//f1的任务代码
				callback();
			},1000);
		}
		效果如f1(f2);相当于先执行程序的主要逻辑，将耗时的操作推迟执行。
二：事件监听
	1>通过某一个事件是否发生，来调用另外一个事件
		//当f1发生done事件，就执行f2
		function f1(){
	　　　　setTimeout(function () {
	　　　　　　// f1的任务代码
	　　　　　　f1.trigger('done');
	　　　　}, 1000);
	　　}
	
三：发布/订阅
	1>f2向"信号中心"jQuery订阅"done"信号。
		jQuery.subscribe("done", f2);
	2>f1做改写
		function f1(){
	　　　　setTimeout(function () {
	　　　　　　// f1的任务代码
	　　　　　　jQuery.publish("done");//f1执行完成后，向"信号中心"jQuery发布"done"信号，从而引发f2的执行。
	　　　　}, 1000);
	　　}
	3>jQuery.unsubscribe("done", f2);//f2完成执行后，也可以取消订阅（unsubscribe）
	
	