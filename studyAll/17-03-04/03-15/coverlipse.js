1.'通过 EclEmma 运行' HelloWorld.main() 函数

2.EclEmma 用不同的色彩标示了源代码的测试情况。其中，
'绿色'的行表示该行代码被'完整'的'执行'，'红色'部分表示该行代码根本'没有被执行'，
而'黄色'的行表明该行代码'部分被执行'。
黄色的行通常出现在单行代码包含分支的情况，例如 图 4 中的 16 行就显示为黄色。
由于程序中有一个'随机'确定的'分支'，因此读者的'窗口'可能与这里稍有'不同'
 if(){}else{}只会有一行被执行
'除了'在源代码编辑窗口'直接'进行'着色'之外，
EclEmma '还提供'了一个单独的'视图'来'统计'程序的覆盖测试率。

3.'一次运行'中'覆盖所有'的代码通常'比较困难'，
如果'EclEmma能把多次'测试的'覆盖数据综合'起来进行'察看'，
那么我们就能更方便的掌握多次测试的测试效果。
现在，让'我们重复'数次'对 HelloWorld' 的覆盖'测试'。
我们注意到 'Coverage 视图'总是'显示最新'完成的'一次覆盖测试'。
事实上，'EclEmma' 为我们'保存了所有'的'测试结果'。
接下来，我们将'通过 Coverage 视图'的工具按钮来'结合多次'覆盖测试的'结果'。

4.'单击' 工具栏'按钮'。之后，一个'对话框'将被弹出以'供用户选择'需要'合并的覆盖测试'。

5.'合并'完成'之后'，我们可以'观察到 Java 编辑器'和 'Coverage 视图'中都'显示'了'合并'之'后的结果'

6.通常'代码覆盖'测试'工具'都需要'对被执行的代码''进行修改'。而 'Emma' 提供了'两种方式'来'完成'这件事。
1).预插入模式：对程序进行'测量之前'，需要'采用 Emma' 提供的'工具对 class 文件'或者 'jar 文件进行修改'。
修改完成'之后的代码'可以'立刻被执行'。覆盖测试的'结果'将会被'存放到指定'的'文件'中。
2).即时插入模式：即时插入模式'不需'要事先'对代码'进行'修改'。相反，对代码的'修改'是'通过'一个 'Emma' '定制的' 
Class loader（'类载入器'）'进行'的。这种方式的'优点'很明显，我们'不需'要对 class 或者 jar 文件进行任何'修改'。
'缺点'是我们'为了'获得'测试的结果'，'需'要'用Emma'提供的'命令' 'emmarun' 来'执行'Java应用程序。
使用即时插入模式的优点很明显：class 文件和 jar 文件不会被修改。而预插入模式的应用范围更为广泛，
对于某些需要嵌入到框架中运行的代码来说（例如 EJB），我们只能使用预插入模式。
EclEmma 仅仅使用了 Emma 的预插入模式来工作，不过 EclEmma 缺省会在临时目录中创建 class 文件和 
jar 文件的副本来进行修改，因此在 workspace 中 class 和 jar 文件仍然保持原样。虽然听上去很好，
但是由于需要修改 classpath 来使用修改过的 class 和 jar 文件，对于不能修改 classpath 的应用
（例如 Eclipse RCP 和 JUnit Plugin Test）来说，我们还是只能选择修改 workspace 中的 class 文件和 jar 文件。
对于 Java Application 和 JUnit 类型的覆盖测试，我们可以在配置对话框中选中“In-place instrumentation”项
来指定直接修改 Workspace 中的 .class 文件和 .jar 文件。