在谈论'数据库架构'和'数据库优化'的时候，我们经常会听到'“分库分表”'、'“分片”'、
'“Sharding”…'这样的关键词。让人感到高兴的是，这些朋友所服务的公司业务量正在
（或者即将面临）高速增长，技术方面也面临着一些挑战。让人感到担忧的是，
他们系统真的就需要“分库分表”了吗？“分库分表”有那么容易实践吗？为此，
笔者整理了分库分表中可能遇到的一些问题，并结合以往经验介绍了'对应的解决思路'和建议。

"垂直分表"
垂直分表在日常开发和设计中比较常见，'通俗的说'法叫做'“大表拆小表”'，拆分是'基于'关系型数据库
中的“列”（'字段'）'进行'的。通常情况，某个表中的字段比较多，可以新建立一张“'扩展表'”，
将不经常使用或者'长度较大的字段'拆分出去'放到“扩展表”中'，

'小结'
在'字段很多的情况下'，拆分开确实更'便于开发和维护'（笔者曾见过某个遗留系统中，
一个大表中包含100多列的）。某种意义上也能'避免“跨页”的问题'（MySQL、MSSQL底层都是
通过'“数据页”来存储的'，'“跨页”'问题可能会'造成额外的性能开销'，这里不展开，
感兴趣的朋友可以自行查阅相关资料进行研究）。

'拆分字段'的操作建议'在数据库设计阶段就做好'。如果是在'发展过程中拆分'，则'需要改写'
以前的'查询语句'，会'额外带来一定的成本和风险'，建议谨慎。


垂直分库

垂直分库在“微服务”盛行的今天已经非常普及了。基本的思路就是'按'照业务'模块'来划'分出'不同的'数据库'，
而'不是'像早期一样将'所有'的'数据表'都'放'到'同一个数据库'中。如下图：

'小结'
系统层面的“服务化”拆分操作，'能够解决'业务系统层面的'耦合和性能瓶颈'，有'利于'系统的'扩展维护'。
而数据库层面的拆分，道理也是相通的。与服务的“治理”和“降级”机制类似，我们也能'对不同''业务类型'
的'数据'进行'“分级”管理'、维护、监控、扩展等。
众所周知，'数据库'往往最'容易''成为'应用系统的'瓶颈'，而数据库本身属于“有状态”的，
相对于'Web'和'应用服务器'来讲，是比较'难实现“横向扩展”'的。'数据库'的'连接资源'比较'宝贵'
且'单机处理能力'也'有限'，在'高并发''场景下'，'垂直分库''一定程度'上'能够突破''IO、连接数'
及'单机硬件资源的瓶颈'，'是'大型'分布式系统'中'优化数据库'架构的'重要手段'。
然后，'很多人'并'没有'从根本上'搞清楚''为什么要拆分'，也'没有掌握'拆分的'原则和技巧'，
只是一味的模仿大厂的做法。'导致''拆分'后遇到很多'问题'（例如：'跨库join'，'分布式事务'等）。


水平分表

水平分表也称为'横向分表'，比较容易理解，就是'将表中不同的数据行'按照一定规律'分布到'
'不同'的数据库'表'中
（这些'表'保存'在''同一个''数据库中'），这样来'降低''单表数据量'，'优化查询性能'。
最'常见'的'方式'就是'通过主键'或者'时间'等字段进行'Hash和取模后拆分'。如下图所示：

'小结'
'水平分表'，'能'够'降低单表'的'数据量'，一定程度上可以'缓解'查询'性能瓶颈'。
但本质上'这些表'还'保存在'同'一个库中'，所以'库级别'还是'会有IO瓶颈'。
所以，一般'不建议'采用'这种做法'。


水平分库分表
'水平分库分表'与上面讲到的'水平分表'的'思想相同'，唯一'不同的就是'
'将'这些'拆分出来的表''保存在''不同的数据库中'。这也是很多大型互联网公司所选择的做法。

某种意义上来讲，有些系统中使用的'“冷热数据分离”'（'将'一些'使用''较少的历史数据''迁移到'
'其他的数据库'中。而在'业务功能上'，通常'默认'只'提供热点数据'的'查询'），也是类似的实践。
在'高并发和海量数据'的场景下，'分库分表'能够'有效缓解单机'和'单库'的'性能瓶颈和压力'，
'突破IO'、'连接数'、'硬件资源'的'瓶颈'。当然，'投入的硬件成本'也会'更高'。同时，
这也会'带来'一些复杂的'技术问题'和挑战（例如：跨分片的'复杂查询'，'跨分片事务'等）

*****************************************************

'分库分表'的'难点'

'垂直分库'带来'的''问题'和'解决思路'：

'跨库join'的问题
在'拆分之前'，系统中很多'列表'和'详情'页所需的'数据'是可以'通过''sql join'来'完成'的。
而'拆分后'，数据库可能是'分布式''在不同实例'和'不同的主机上'，join将变得非常麻烦。
而且'基于架构''规范'，'性能'，'安全性'等'方面''考虑'，一般是'禁止''跨库join'的。
那该怎么办呢？首先要考虑下垂直分库的设计问题，如果可以调整，那就优先调整。
如果无法调整的情况，下面笔者将结合以往的实际经验，'总结几种'常见的'解决思路'，
并分析其适用场景。


'字段冗余'
这是一种典型的'反范式设计'，在互联网行业中'比较常见'，通常是为了性能来避免join查询。
举个电商业务中很简单的场景：
'“订单表”'中保存'“卖家Id”'的同时，'将'卖家的'“Name”字段''也冗余'，这样'查询订单'
'详情'的时候就'不需要'再去'查询“卖家用户表”'。
字段冗余能带来便利，是一种“空间换时间”的体现。但其'适用场景'也比较'有限'，
比较适合'依赖字段较少的情况'。最复杂的还是'数据一致性问题'，这点'很难保证'，
可以'借助'数据库中的'触发器'或者在'业务代码'层面'去保证'。当然，
也需要'结合''实际'业务'场景'来'看一致性'的'要求'。就像上面例子，
如果卖家修改了Name之后，是否需要在订单信息中同步更新呢？

数据同步
定时'A库中的tab_a表'和'B库中tbl_b''有关联'，可以'定时将''指定的表''做同步'。
当然，'同步'本来'会对数据库''带来'一定的'影响'，需要'性能影响'和'数据时效性'
中'取得'一个'平衡'。这样来'避免复杂'的'跨库查询'。'笔者'曾经在项目中是'通过ETL工具'
来'实施'的。

系统层组装
在'系统层面'，通过'调用'不同'模块'的'组件''或'者'服务'，'获取'到'数据'并'进行字段''拼装'。
说起来很容易，但'实践起来'可真'没有这么简单'，尤其是'数据库设计'上'存在问题'
但又'无法轻易调整'的时候。
具体情况通常会比较复杂。下面笔者结合以往实际经验，并通过伪代码方式来描述。

'简单的列表查询的情况'
伪代码很容易理解，'先获取'“我的提问'列表'”'数据'，然后'再根据'列表中的'UserId'去
循环调用依赖的用户服务'获取'到'用户的RealName'，拼装结果并返回。

有经验的读者一眼就能看出上诉伪代码存在效率问题。循环调用服务，可能会有循环RPC，
'循环查询数据库'…'不推荐使用'。再看看改进后的：

这种实现方式，看起来要优雅一点，其实就是'把循环调用''改成一次调用'。当然，用户服务
的'数据库查询'中很'可能是In查询'，效率方面比上一种方式更高。（坊间流传'In查询'会'全表'
'扫描'，'存在性能问题'，传闻'不可全信'。其实'查询优化'器都'是基本成本估算'的，经过测试，
在'In语句'中条件'字段有索引'的时候，'条件较少'的情况是'会走索引'的。这里'不细展开说明'，
感兴趣的朋友请自行测试）。

小结
'简单字段组装'的情况下，我们只需要'先获取“主表”数据'，然后'再''根据关联关系'，
'调用其他模块'的'组件'或'服务'来'获取依赖的其他字段'（如例中依赖的用户信息），
'最后将数据'进行'组装'。通常，我们都会'通过缓存'来'避免频繁RPC通信'和'数据库查询'的开销。

列表查询带条件过滤的情况
在'上述例子'中，都是'简单'的'字段组装'，而'不存在条件过滤'。看拆分前的SQL
这种'连接查询'并且还'带条件过滤'的情况，想'在代码层面''组装数据'其实是'非常复杂的'
（'尤其'是'左表'和'右表''都带条件过滤'的情况'会更复杂'），'不能像'之前'例子中'
'那样简单'的进行'组装'了。试想一下，如果'像上面那样''简单'的进行'组装'，
造成的'结果就是'返回的'数据不完整'，'不准确'。

有如下几种解决思路：
'查出'所有的'问答数据'，然后调用'用户服务'进行'拼装数据'，再'根据'过滤字段'state字段'
进行'过滤'，'最后'进行'排序和分页'并返回。
这种方式能够'保证数据'的'准确性'和'完整性'，但是'性能影响非常大'，'不建议使用'。
查询出'state'字段'符合/不符合'的'UserId'，在'查询问答数据'的时候'使用in/not in'进行过滤，
排序，分页等。'过滤出有效的问答数据后'，再调用'用户服务获取数据进行组装'。
这种方式明显更优雅点。笔者之前在某个项目的特殊场景中就是采用过这种方式实现。

'跨库事务'（分布式事务）的'问题'
'按业务''拆分数据库'之后，'不可避免'的就是'“分布式事务”'的'问题'。'以往'在'代码'中通过
spring'注解简单配置'就'能实现事务'的，'现在'则需'要花很大的成本'去'保证一致性'。
这里不展开介绍，感兴趣的读者可以自行参考《分布式事务一致性解决方案》，链接地址： 
http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency


垂直分库总结和实践建议
本篇中主要描述了几种'常见'的'拆分方式'，并'着重介绍'了'垂直分库'带来的一些'问题'和'解决'
思路。读者朋友可能还有些问题和疑惑。

1. 我们目前的数据库是否需要进行垂直分库？
'根据系统架构'和'公司实际情况'来，如果你们的'系统'还'是个简单'的'单体应用'，并且'没有'
什么'访问量'和'数据量'，那就'别着急折腾''“垂直分库”'了，否则'没有任何收益'，也很难有好结果。
切记，'“过度设计”'和'“过早优化”''是'很多'架构师'和'技术人员''常犯'的'毛病'

2. '垂直拆分''有没有''原则'或者'技巧'？
'没有'什么'黄金法则'和'标准答案'。一般是'参考系统'的'业务模块''拆分'来'进行数据库'的'拆分'。
比如“'用户服务'”，对应的'可能就是'“'用户数据库'”。但是也'不一定严格'一一'对应'。
'有些情况'下，'数据库拆分'的'粒度'可能会'比系统拆分'的粒度'更粗'。
笔者也确实'见过'有些'系统'中的'某些表'原本'应该放A库'中的，却'放在了B库中'。'有些库和表'
'原本是'可以'合并的'，'却单独保存'着。还'有些表'，看起来'放在A库中也OK'，'放在B库中也合理'。
'如何''设计'和'权衡'，这个就'看实际情况'和'架构师/开发人员'的水平了。

3. 上面举例的都太简单了，我们的后台'报表系统'中'join的表''都有n个了'， 
'分库后'该'怎么查'？
有很多朋友跟我提过类似的问题。其实'互联网'的'业务系统'中，本来'就应该尽量避免'
join的，如果'有多个join的'，要么是'设计不合理'，要么是'技术选型有误'。
请'自行科普'下'OLAP'和'OLTP'，'报表类'的'系统'在'传统BI时代'都是
'通过OLAP数据仓库'去'实现'的（'现在'则更多是'借助离线分析'、'流式计算等手段实现'），
而'不该向上面'描述的那样'直接在业务库中''执行大量join和统计'。













