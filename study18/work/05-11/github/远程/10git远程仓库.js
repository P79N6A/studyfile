到目前为止，我们已经掌握了如何在Git仓库里对一个文件进行时光穿梭，
你再也不用担心文件备份或者丢失的问题了。

可是有用过集中式版本控制系统SVN的童鞋会站出来说，这些功能在SVN里早就有了，
没看出Git有什么特别的地方。

没错，如果只是在一个仓库里管理文件历史，Git和SVN真没啥区别。
为了保证你现在所学的Git物超所值，将来绝对不会后悔，同时为了打击已经不幸学了SVN的童鞋，
本章开始介绍Git的杀手级功能之一（注意是之一，也就是后面还有之二，之三……）：
'远程仓库'。

Git是分布式版本控制系统，同'一个Git仓库'，可以'分布到''不同'的'机器上'。
怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，
'别的机器'可以'“克隆”'这个'原始版本库'，而且'每台机'器的'版本库'其实都'是一样的'，并没有主次之分。

你肯定会想，至少需要两台机器才能玩远程库不是？但是我只有一台电脑，怎么玩？

其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。不过，
现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，
因为一台电脑上搞几个远程库完全没有意义，而且硬盘挂了会导致所有库都挂掉，
所以我也不告诉你在一台电脑上怎么克隆多个仓库。

实际情况往往是这样，找'一台电脑'充'当服务器'的角色，每天'24小时开机'，
'其他'每个人都'从这个“服务器”仓库''克隆'一份'到自己'的'电脑'上，
并且'各自把各自'的'提交推送''到服务器仓库'里，也'从服务器仓库'中'拉取别人的提交'。

完全可以自己搭建一台运行Git的服务器，不过现阶段，
为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫GitHub的神奇的网站，
从名字就可以看出，这个网站就是提供Git仓库托管服务的，
所以，只要'注册'一个'GitHub账号'，就可以'免费获得Git远程仓库'。


在继续阅读后续内容前，请自行注册GitHub账号。
由于你的'本地Git仓库'和'GitHub仓库'之间的'传输'是'通过SSH加密'的，所以，需要一点设置：

第1步：'创建SSH Key'。
在用户主目录下，看看有没有.ssh目录，如果有，
再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，
可直接跳到下一步。如果没有，'打开Shell'（Windows下打开Git Bash），
'创建SSH Key：'
$ ssh-keygen -t rsa -C "whliuqi@sina.com"

你需要把邮件地址换成你自己的邮件地址，然后一路回车，'使用默认值即可'，
由于这个Key也不是用于军事目的，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，
这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：'登陆GitHub'，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，'在Key文本框里粘贴id_rsa.pub文件'的内容：

点“Add Key”，你就应该看到已经添加的Key：

为什么GitHub需要SSH Key呢？因为'GitHub'需要'识别'出你推送的'提交确实是你推送的'，
而'不是别人冒充的'，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，
就可以确认只有你自己才能推送。

当然，GitHub'允许'你'添加多个Key'。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，
只要'把每台电脑的Key'都'添加到GitHub'，就'可以在每台电脑'上'往GitHub推送'了。

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。
所以，不要把敏感信息放进去。

如果你不想让别人看到Git库，有两个办法，'一'个是'交点保护费'，让GitHub把公开的仓库变成私有的，
这样别人就看不见了（不可读更不可写）。另'一'个办法是自己动手，'搭一个Git服务器'，
因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，
相当简单，公司内部开发必备。

确保你拥有一个GitHub账号后，我们就即将开始远程仓库的学习。