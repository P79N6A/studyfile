'什么是版本库'呢？版本库又名仓库，英文名repository，你可以简单理解成'一个目录'，
这个'目录里面'的'所有文件'都可以'被Git管理'起来，每个文件的'修改、删除，Git''都能跟踪'，
以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。

所以，'创建'一个'版本库'非常简单，首先，'选择一个合适的地'方，'创建一个空目录'：

$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

pwd命令用于显示当前目录。在我的Mac上，这个仓库位于/Users/michael/learngit。

如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请'确保目录名'（包括父目录）'不包含中文'。
第二步，通过'git init'命令'把'这个'目录变成Git''可以管理的仓库'：

$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

瞬间'Git'就'把仓库建好了'，而且告诉你'是一个空'的'仓库'（empty Git repository），
细心的读者可以发现'当前目录'下'多了一个.git'的'目录'，这个目录'是Git'来'跟踪''管理版本库的'，
没事千万'不要''手动修改'这个目录里面的'文件'，不然改乱了，就把Git仓库给破坏了。

如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用'ls -ah'命令就'可以看见'。

也不一定必须在空目录下创建Git仓库，'选择'一个'已经有东西的目录''也'是'可以'的。不过，
不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。

把'文件添加到版本库'
首先这里再明确一下，'所有'的'版本控制系统'，其实'只能跟踪文本'文件的'改动'，比'如TXT文件'，
'网页'，所有的'程序代码'等等，'Git也不例外'。版本控制系统可以'告诉你每次的改动'，
比'如在第5行''加了一个单词“Linux”'，在'第8行删了一个单词“Windows”。'
而'图片、视频'这些'二进制文件'，虽然也能由版本控制系统管理，但'没法跟踪文件'的'变化'，
只能把二进制文件每次改动串起来，也就是'只知道图片从100KB''改成了120KB'，
但'到底改了啥'，版本控制系统不知道，也'没法知道'。

不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是'没法跟踪''Word文件'的改动的，
前面我们举的例子只是为了演示，如果要'真正使用版本控制'系统，就'要以纯文本方式编写文件'。

因为'文本'是'有编码'的，比如'中文'有'常用的GBK编码'，'日文有Shift_JIS编码'，如果没有历史遗留问题，
强烈'建议使用标准的UTF-8编码'，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。

使用'Windows'的童鞋要'特别注意'：

千万'不要使用Windows自带的记事本''编辑'任何'文本文件'。原因是Microsoft开发记事本的团队
使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头
添加了0xefbbbf（十六进制）的字符，你'会遇到'很多不可思议的'问题'，比如，
网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，
等等，都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，
不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：

言归正传，现在我们'编写一个readme.txt'文件，内容如下：

Git is a version control system.
Git is free software.
一定要'放到learngit目录下（子目录也行）'，因为这是一个Git仓库，
放到其他地方Git再厉害也找不到这个文件。

和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。

第'一'步，用命令'git add'告诉Git，把'文件添加到仓库'：

$ git add readme.txt
执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

第'二'步，用命令'git commit'告诉Git，把文件'提交到仓库'：

$ git commit -m "wrote a readme file"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 
简单解释一下'git commit'命令，'-m'后面输入的是'本次提交的说明'，可以输入任意内容，
当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

嫌麻烦不想输入-m "xxx"行不行？确实有办法可以这么干，但是强烈不建议你这么干，
因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，
我不告诉你这个参数。

git commit命令执行成功后会告诉你，'1个文件被改动'（我们新添加的readme.txt文件），
'插入'了'两行内容'（readme.txt有两行内容）。

'为什么'Git'添加'文件需'要add'，'commit'一共'两步'呢？因为'commit'可以'一次提交很多文件'，
所以你可以'多次add不同的文件（然后一次commit）'，比如：
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

小结
现在总结一下今天学的两点内容：

'初始化一个Git仓库'，使'用git init'命令。

'添加'文件'到Git仓库'，分两步：

第'一'步，使用命令'git add <file>'，注意，可反复多次使用，添加多个文件；

第'二'步，使用命令'git commit'，完成。

