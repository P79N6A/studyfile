1.【强制】在'一个 switch 块内'，'每个 case' '要么通过 break/return' 等来'终止'，
'要么注释说明'程序将继续执行'到哪一个 case 为止'；在'一个 switch 块内'，
都'必须'包'含一个 default' 语句并且'放在最后'，'即使空代码'。

2.【强制】在 'if/else/for/while/do 语句'中'必须使用大括号'。 '即使只有一行代码'，
'避免'采用'单行的编码方式'： if (condition) statements;

3.【强制】在'高并发场景'中，'避免使用”等于”'判断'作为中断'或'退出的条件'。
说明： 如果'并发控制没有处理好'，容'易''产生等值判断''被“击穿”的情况'，
'使用''大于或小于'的'区间判断条件'来'代替'。
反例： '判断剩余奖品''数量等于 0' 时，'终止发放奖品'，但'因为并发处理错误'
'导致奖品数量'瞬间'变成了负数'， 这样的话，'活动无法终止'。

4.【推荐】'表达异常的分支'时， '少用 if-else 方式'， 这种方式'可以改写成'：
if (condition) {
	...
	return obj;
}
说明：'如果非得使用 if()...else if()...else...'方式表达逻辑，【强制】避免后续代码
维护困难，请'勿超过 3 层'。
正例： '超过 3 层的 if-else'的'逻辑判断代码'可以使'用卫语句'、'策略模式'、'状态模式'
等'来实现'，其中'卫语句示例如下'：
public void today() {
	if (isBusy()) {
		System.out.println(“change time.”);
		return;
	}
	if (isFree()) {
		System.out.println(“go to travel.”);
		return;
	}
	System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);
	return;
}

'卫语句'就'是''把复杂的条件表达式''拆分成''多个条件表达式'，'比如'一个很复杂的表达式，
'嵌套'了'好几层的if-then-else语句'，'转换为多个if语句'，实现它的逻辑，
这'多条的if语句'就'是卫语句'.
if（obj != null）{  
  doSomething();  
}  
  
转换成卫语句以后的代码如下：  
if(obj == null){  
   return;  
}  
doSomething();  

5. 【推荐】除常用方法（如 getXxx/isXxx）等外，'不要在'条件'判断中''执行'其它'复杂的语句'，
将'复杂逻辑判断'的结果'赋值给'一个'有意义的布尔变量名'，以'提高可读性'。
说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么
样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？
正例：
//伪代码如下
final boolean existed = (file.open(fileName, "w") != null) && (...) || (...);
if (existed) {
	...
}
反例：
if ((file.open(fileName, "w") != null) && (...) || (...)) {
	...
}

6. 【推荐】'循环体'中的'语句''要考量性能'，以下'操作尽量移至''循环体''外''处理'，
如'定义对象'、'变量'、'获取''数据库连接'，进行不必要的 try-catch 操作
（这个 try-catch 是否可以移至循环体外）。

7. 【推荐】'避免'采用'取反逻辑运算符'。
说明： 取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。
正例： 使用 if (x < 628) 来表达 x 小于 628。
反例： 使用 if (!(x >= 628)) 来表达 x 小于 628。

8. 【推荐】'接口入参保护'，这种场景常见的是'用作批量操作'的'接口'。

9. 【参考】 '下列情形'，需'要进行参数校验'：
1）'调用频次低''的方法'。
2）'执行时间开销很大''的方法'。'此情形'中，'参数校验时间'几乎'可以忽略不计'，
但'如果因为参数错误''导致中间执行回退'，'或者错误'，那'得不偿失'。
3） '需要极高稳定性'和'可用性的方法'。
4） 对外'提供'的'开放接口'，不管是 RPC/API/HTTP 接口。
5） '敏感权限入口'。

10.【参考】 '下列情形'， '不需要'进行'参数校验'：
1） 极有'可能被循环调用''的方法'。但在'方法说明'里必'须注明外部参数''检查要求'。
2） '底层调用频度'比较'高的方法'。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底
层才会暴露问题。一般'DAO层'与'Service层'都'在同一个应用中'，'部署在''同一台服务器'中，
所以'DAO 的参数校验'，'可以省略'。
3） 被'声明成 private'只会'被自己代码所调用'的方法，如果能够'确定调用方法的代码'
传入'参数已经做过检查'或者'肯定不会有问题'，此时'可以不校验参数'。

