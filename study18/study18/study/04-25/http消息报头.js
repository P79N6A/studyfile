HTTP消息'由客户端到服务器的请求'和'服务器到客户端的响应'组成。 
'请求消息'和'响应消息'都是由
开始'行'（对于请求消息，开始行就是请求行，对于响应消息，开始行就是状态行），
'消息报头'（可选），空行（只有CRLF的行），
消息'正文'（可选）组成。

HTTP'消息报头'包括'普通报头'、'请求报头'、'响应报头'、'实体报头'。 
每一个报头域都是由 [名字+“：”+空格+值] 组成，消息报头域的名字是大小写无关的。

'1、普通报头'
在'普通报头中'，有'少数报头'域'用于所有的请求'和'响应'消息，
但并'不用于'被传输的'实体'，只用于传输的消息。 
例如： 
'Cache-Control' 用于'指定缓存指令'，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），
且是独立的（一个消息的缓存指令不会影响另一个消息处理的缓存机制）， 
请求时的缓存指令包括：no-cache（用于指示请求或响应消息不能缓存）、no-store、
max-age、max-stale、min-fresh、only-if-cached; 
响应时的缓存指令包括：public、private、no-cache、no-store、no-transform、
must-revalidate、proxy-revalidate、max-age、s-maxage.

HTTP1.0使用的类似的报头域为Pragma。

'2、请求报头'
请求报头'允许客户端'向'服务器''传递'请求的'附加信息'以及'客户端自身的信息'。

常用的请求报头域：
'Accept'：用于'指定'客户端'接受哪些'类型的'信息'。 
eg：Accept：image/gif，表明客户端希望接受GIF图象格式的资源；Accept：text/html，
表明客户端希望接受html文本。
'Accept-Charset'：用于'指定'客户端接受的'字符集'。 
eg：Accept-Charset:iso-8859-1,gb2312.如果在请求消息中没有设置这个域，
缺省是任何字符集都可以接受。
'Accept-Encoding'：请求报头域类似于Accept，但是它是用于指定可接受的内容编码。 
eg：Accept-Encoding:gzip.deflate.如果请求消息中没有设置这个域服务器假定
客户端对各种内容编码都可以接受。
'Accept-Language'：类似于Accept，但是它是用于指定一种自然语言。 
eg：Accept-Language:zh-cn.如果请求消息中没有设置这个报头域，服务器假定
客户端对各种语言都可以接受。
Authorization：主要用于证明客户端有权查看某个资源。 
eg：当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），
可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。
Host：主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取。 
eg：我们在浏览器中输入：http://www.guet.edu.cn/index.html，
浏览器发送的请求消息中，就会包含Host请求报头域Host：www.guet.edu.cn，
此处使用缺省端口号80，若指定了端口号，则变成Host：www.guet.edu.cn：指定端口号。
User-Agent：允许客户端将它的操作系统、浏览器和其它属性告诉服务器。 
eg：我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的
操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人
感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域
中获取到这些信息。不过，这个报头域不是必需的，如果我们自己编写一个浏览器，
不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。
'3、响应报头'
响应报头允许'服务器传递''不'能'放在状态行中'的'附加响应信息'，以及'关于服务器的'
'信息'和对Request-URI所标识的资源进行下一步访问的信息。

常用的响应报头域：
'Location'：用于'重定向'接受者到一个'新的位置'。Location响应报头域常用在更换域名的时候。
'Server'：包含了服务器用来'处理请求的软件信息'。与User-Agent请求报头域是相对应的。 
eg：Server：Apache-Coyote/1.1
WWW-Authenticate：必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，
并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。 
eg：WWW-Authenticate:Basic realm=”Basic Auth Test!” 
//可以看出服务器对请求资源采用的是基本验证机制。
'4、实体报头'： 
'请求和响应'消息都可以'传送一个实体'。一个'实体由实体报头'域和'实体正文组成'。 
但并不是说'实体报头域'和'实体正文'要在'一起发送'，'可'以'只发送实体报头域'。 
实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。

常用的实体报头域：
'Content-Encoding'：被用作媒体类型的修饰符，它的值指示了已经被应用到
实体正文的附加内容的'编码'，因而要获得Content-Type报头域中所引用的媒体类型，
必须采用相应的解码机制。 
例如，Content-Encoding记录文档的压缩方法，Content-Encoding：gzip
'Content-Language'：描述了资源所用的自然'语言'。没有设置该域则认
为实体内容将提供给所有的语言阅读者。 
例如，Content-Language:da
'Content-Length'：用于指明实体正文的'长度'，以字节方式存储的十进制数字来表示。
'Content-Type'：用于指明发送给接收者的实体正文的媒体'类型'。 
例如，Content-Type:text/html;charset=ISO-8859-1 
Content-Type:text/html;charset=GB2312
Last-Modified：用于指示资源的最后修改日期和时间。
Expires：给出响应过期的日期和时间。 
为了让代理服务器或浏览器在一段时间以后更新缓存中（再次访问曾访问过的页面时，
直接从缓存中加载，缩短响应时间和降低服务器负载）的页面，我们可以使用Expires
实体报头域指定页面过期的时间。 
例如，Expires：Thu，15 Sep 2006 16:23:12 GMT


